@using Models
@inject HttpClient Http
@inject NavigationManager Nav

@if (Survey != null) {
    <EditForm Model=@result OnValidSubmit=FormSubmitted>
        <ObjectGraphDataAnnotationsValidator />
        @for (var i = 0; i < Survey.Questions.Count; i++) {
            var local = i;
            var question = Survey.Questions[local];
            <div class="statement">@question.Statement</div>
            <InputRadioGroup @bind-Value=result.Answers[local].Option class="form-control">
                <div class="options d-flex justify-content-around">
                    <div>
                        <InputRadio Value=1 />@question.Option1
                    </div>
                    <div>
                        <InputRadio Value=2 />@question.Option2
                    </div>
                </div>
            </InputRadioGroup>
        }
        <div class="d-flex justify-content-center">
            <input type="submit" value="Submit" class="btn btn-primary btn-lg" />
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public Models.Survey Survey { get; set; }
    Result result = new Result();
    protected override void OnInitialized()
    {
        result.Answers = new List<Answer>();
        if(Survey != null) {
            foreach (var question in Survey.Questions) {
                result.Answers.Add(new Answer() {QuestionId = question.Id});
            }
        } 
    }
    public async Task FormSubmitted() {
        try {
            //var json = System.Text.Json.JsonSerializer.Serialize(result.Answers);
            //var content = new StringContent(json);
            //await Http.PostAsync("https://localhost:5001/api/Answers", content);
            await Http.PostAsJsonAsync<List<Answer>>("https://localhost:5001/api/Answers", result.Answers);
            Nav.NavigateTo("success");
            foreach (var item in result.Answers) {
                Console.WriteLine(item.Option);
            }
        }
        catch (Exception e) {
            Console.WriteLine("Fail");
        }
    }
    public class Result {
        [ValidateComplexType]
        public List<Answer> Answers { get; set;}
    }
}
