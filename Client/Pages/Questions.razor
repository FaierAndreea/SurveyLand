@page "/questions/{SurveyId:int}"
@using Models
@inject HttpClient Http

@if (survey != null) {
    <EditForm Model=result OnSubmit=FormSubmitted>
        @for(var i=0; i<survey.Questions.Count; i++) {
            var index = i+1;
            var q = survey.Questions[i];
            <div class="index">@index .</div>
            <div class="statement">@q.Statement</div>
            <div class="d-flex justify-content-around form-check mt-4 mb-5">
                <div class="option">
                    <input class="form-check-input" type="radio" name="@index" id="exampleRadios1" [value]="1" checked=@(result.Answers[index].Option = 1)>
                    <label class="form-check-label" for="exampleRadios1">
                        @q.Option1
                    </label>
                </div>
                <div class="option">
                    <input class="form-check-input" type="radio" name="@index" id="exampleRadios2" [value]="2" checked=@(result.Answers[index].Option = 2)>
                    <label class="form-check-label" for="exampleRadios2">
                        @q.Option2
                    </label>
                </div>
            </div>
        }
    </EditForm>
}

@code {
    [Parameter]
    public int SurveyId { get; set; }
    private Models.Survey survey;
    Result result = new Result();
    protected async override Task OnParametersSetAsync()
    {
        survey = await Http.GetFromJsonAsync<Models.Survey>("https://localhost:5001/api/Surveys/" + SurveyId);
        if(survey != null) {
            foreach (var question in survey.Questions) {
                result.Answers.Add(new Answer() {QuestionId = question.Id});
            }
        } 
    }
    public void FormSubmitted() {
        foreach(var item in result.Answers) {
            Console.WriteLine(item.Option);
        }
    }
    public class Result {
        public List<Answer> Answers { get; set; }
    }
}



@* @page "/questions/{SurveyId:int}"
@using Models
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

@if (survey != null) {
    

}

@code {
    [Parameter]
    public int SurveyId { get; set; }
    private Models.Survey survey;
    private Result result = new Result();

    protected async override Task OnParametersSetAsync() {
        survey = await Http.GetFromJsonAsync<Models.Survey>("https://localhost:5001/api/Surveys/" + SurveyId);
    }
    public void FormSubmitted() {
            Console.WriteLine("Submitted ");
    }
    public class Result {
        public List<Answer> answers ;
    }
} *@
