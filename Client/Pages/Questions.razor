@page "/questions/{SurveyId:int}"

@using Models
@inject HttpClient Http
@inject NavigationManager NavManager

@if (Survey != null) {
    <TopBar ComponentName=@title />
    <EditForm Model=@result OnValidSubmit=FormSubmitted style="margin-top:10px">
        <ObjectGraphDataAnnotationsValidator />
        @for (var i = 0; i < Survey.Questions.Count; i++) {
            var local = i;
            var question = Survey.Questions[local];
            <div class="statement">@question.Statement</div>
            <InputRadioGroup @bind-Value=result.Answers[local].Option class="form-control">
                <div class="options d-flex justify-content-around">
                    <div>
                        <InputRadio Value=1 />@question.Option1
                    </div>
                    <div>
                        <InputRadio Value=2 />@question.Option2
                    </div>
                </div>
            </InputRadioGroup>
            <hr/>
        }
        <div class="d-flex justify-content-center mt-1 mb-1">
            <input type="submit" value="Submit" class="btn btn-primary btn-lg" />
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int SurveyId { get; set; } = 0;
    public Models.Survey Survey { get; set; }
    Result result = new Result();
    string title;

    protected async override Task OnParametersSetAsync() {
        Survey = await Http.GetFromJsonAsync<Models.Survey>("https://localhost:5001/api/Surveys/" + SurveyId);

        result.Answers = new List<Answer>();
        if (Survey != null) {
            foreach (var question in Survey.Questions) {
                result.Answers.Add(new Answer() { QuestionId = question.Id });
            }
        }
        title = Survey.Title + " Questions";
    }

    public async Task FormSubmitted() {
        var response = await Http.PostAsJsonAsync<List<Answer>>("https://localhost:5001/api/Answers", result.Answers);
        System.Console.WriteLine(response.StatusCode);
        if(response.IsSuccessStatusCode) 
            NavManager.NavigateTo("success");
    }

    public class Result {
        [ValidateComplexType]
        public List<Answer> Answers { get; set; }
    }
}
